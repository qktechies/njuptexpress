// Generated by CoffeeScript 1.8.0
(function() {
  var bcrypt;

  bcrypt = require('bcrypt');

  module.exports = {

    /*
    	 * @param {String} adminUsername 用户名
    	 * @param {String} password 密码
    	 * @param {String} securityId 验证码id
    	 * @param {String} securityAnswer 验证码答案
     */
    login: function(req, res) {
      var adminUsername, password, securityAnswer, securityId;
      adminUsername = req.body.adminUsername;
      password = req.body.password;
      securityId = req.body.securityId;
      securityAnswer = req.body.securityAnswer;
      return async.waterfall([
        function(cb) {
          if (adminUsername == null) {
            return cb('参数用户名不能为空', null, 400);
          }
          if (password == null) {
            return cb('参数密码不能为空', null, 400);
          }
          if (securityId == null) {
            return cb('参数securityId不能为空', null, 400);
          }
          if (securityAnswer == null) {
            return cb('参数securityAnswer不能为空', null, 400);
          }
          return cb(null);
        }, function(cb) {
          return SecurityCode.findOne().where({
            id: securityId
          }).exec(function(err, securityCode) {
            if (err != null) {
              return cb(err, null, 500);
            }
            if (securityCode == null) {
              return cb('验证码过期', null, 409);
            }
            if (securityCode.content !== securityAnswer) {
              return cb('验证码错误', null, 409);
            }
            return cb(null, securityCode);
          });
        }, function(securityCode, cb) {
          return SecurityCode.destroy(securityCode).exec(function(err, securityCode) {
            if (err != null) {
              return cb(err, null, 500);
            }
            return cb(null);
          });
        }, function(cb) {
          return AdminUser.findOne({
            adminUsername: adminUsername
          }).exec(function(err, user) {
            if (err != null) {
              return cb(err, null, 500);
            }
            if (user == null) {
              return cb('用户名不存在', null, 404);
            }
            if (!user.active) {
              return cb('用户尚未激活', null, 403);
            }
            return cb(null, user);
          });
        }, function(user, cb) {
          return bcrypt.compare(password, user.password, function(err, match) {
            if (err != null) {
              return cb(err, null, 500);
            }
            if (!match) {
              return cb('用户密码错误', null, 401);
            } else {
              return cb(null, user);
            }
          });
        }
      ], function(err, user, status) {
        if (err) {
          return res.status(status).send(err);
        }
        req.session.isAdmin = true;
        return res.json(user, 200);
      });
    },
    logout: function(req, res) {
      req.session.destroy();
      return res.status(200).end();
    },
    regist: function(req, res) {
      var adminUsername, password, securityAnswer, securityId;
      adminUsername = req.body.adminUsername;
      password = req.body.password;
      securityId = req.body.securityId;
      securityAnswer = req.body.securityAnswer;
      return async.waterfall([
        function(cb) {
          if (adminUsername == null) {
            return cb('参数用户名不能为空');
          }
          if (password == null) {
            return cb('参数密码不能为空');
          }
          if (securityId == null) {
            return cb('参数securityId不能为空');
          }
          if (securityAnswer == null) {
            return cb('参数securityAnswer不能为空');
          }
          return cb(null);
        }, function(cb) {
          return SecurityCode.findOne().where({
            id: securityId
          }).exec(function(err, securityCode) {
            if (err != null) {
              return cb('服务器内部错误');
            }
            if (securityCode == null) {
              return cb('验证码过期');
            }
            if (securityCode.content !== securityAnswer) {
              return cb('验证码错误');
            }
            return cb(null, securityCode);
          });
        }, function(securityCode, cb) {
          return AdminUser.findOne({
            adminUsername: adminUsername
          }).exec(function(err, user) {
            if (err != null) {
              return cb('服务器内部错误');
            }
            if (user != null) {
              return cb('用户名已经存在');
            }
            return cb(null, securityCode);
          });
        }, function(securityCode, cb) {
          return AdminUser.create({
            adminUsername: adminUsername,
            password: password
          }).exec(function(err, user) {
            if (err != null) {
              return cb('服务器内部错误');
            }
            return cb(null, securityCode);
          });
        }, function(securityCode, cb) {
          return SecurityCode.destroy(securityCode).exec(function(err, securityCode) {
            if (err != null) {
              return cb('服务器内部错误');
            }
            return cb(null);
          });
        }
      ], function(err) {
        if (err != null) {
          return res.json({
            status: false,
            msg: err
          });
        } else {
          return res.json({
            status: true
          });
        }
      });
    }
  };

}).call(this);
